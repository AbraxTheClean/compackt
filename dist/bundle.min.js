/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _sass_styles_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sass/styles.scss */ \"./src/sass/styles.scss\");\n/* harmony import */ var _sass_styles_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_sass_styles_scss__WEBPACK_IMPORTED_MODULE_0__);\n\n\nclass compacktElement extends HTMLElement {\n  get observedAttributes() {\n    return [];\n  }\n\n  get boundAttributes() {\n    return [];\n  }\n\n  constructor() {\n    super(); //Create observedAttribute Properties\n\n    if (this.observedAttributes.length > 0) {\n      for (let attribute in this.observedAttributes) {\n        Object.defineProperty(this, attribute, {\n          configurable: true,\n\n          get() {\n            return this.getAttribute(attribute);\n          },\n\n          set(val) {\n            if (val) {\n              this.setAttribute(attribute, val);\n            } else {\n              this.removeAttribute(attribute);\n            }\n          }\n\n        });\n      }\n    } //Create boundAttribute Properties\n\n\n    if (this.boundAttributes.length > 0) {\n      for (let attribute in this.boundAttributes) {\n        Object.defineProperty(this, attribute, {\n          configurable: true,\n\n          get() {\n            return this.hasAttribute(attribute);\n          },\n\n          set(val) {\n            if (val) {\n              this.setAttribute(attribute);\n            } else {\n              this.removeAttribute(attribute);\n            }\n          }\n\n        });\n      }\n    }\n  }\n\n}\n\nlet panelTemplate = document.createElement('template');\npanelTemplate.innerHTML = `<style>\n\n:host(compackt-panel) {\n    border-radius: 8px;\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n    box-sizing: border-box;\n    display: inline-block;\n    font-family: 'Source Sans Pro', sans-serif;\n    margin-top: 1em;\n    margin-bottom: 1em;\n    padding: 1em;\n    position: relative;\n}\n\n</style>\n<div>\n    <slot></slot>\n</div>\n`;\nwindow.ShadyCSS && window.ShadyCSS.prepareTemplate(panelTemplate, 'compackt-panel'); // TODO: finish the panel and add to initialise\n\nclass Panel extends compacktElement {\n  get observedAttributes() {\n    return ['colour', 'type'];\n  }\n\n  get boundAttributes() {\n    return [];\n  }\n\n  constructor() {\n    super();\n  }\n\n  connectedCallback() {\n    window.ShadyCSS && window.ShadyCSS.styleElement(this);\n\n    if (!this.shadowRoot) {\n      this.attachShadow({\n        mode: 'open'\n      });\n      this.shadowRoot.appendChild(buttonTemplate.content.cloneNode(true));\n      let dynamicStyles;\n\n      if (this.hasAttribute('colour')) {\n        dynamicStyles = `:host {\n                    --background-colour: ${this.getAttribute('colour')};\n                }`;\n      }\n\n      this.shadowRoot.querySelector('style').innerHTML += dynamicStyles;\n    }\n\n    ShadyCSS && ShadyCSS.styleElement({\n      '--background-colour': this.hasAttribute('colour') ? this.getAttribute('colour') : 'white'\n    });\n  }\n\n}\n\nlet buttonTemplate = document.createElement('template');\nbuttonTemplate.innerHTML = `<style>\n\n:host {\n    background-color: var(--background-colour, red);\n    border-radius: 8px;\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n    font-family: 'Muli', sans-serif;\n    font-weight: bolder;\n    padding: 1em;\n    \n\n    transition: box-shadow 0.8s;\n}\n\n:host(compackt-button:hover) {\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.6);\n    cursor: pointer;\n\n    transition: box-shadow 0.8s;\n}\n</style>\n<slot></slot>`;\nwindow.ShadyCSS && window.ShadyCSS.prepareTemplate(buttonTemplate, 'compackt-button');\n\nclass Button extends compacktElement {\n  get observedAttributes() {\n    return ['colour', 'link', 'action'];\n  }\n\n  get boundAttributes() {\n    return [];\n  }\n\n  constructor() {\n    super();\n  }\n\n  connectedCallback() {\n    //const { shadowRoot } = this;\n    //shadowRoot.innerHTML = this.DefaultTheme + this.HTML;\n    window.ShadyCSS && window.ShadyCSS.styleElement(this);\n\n    if (!this.shadowRoot) {\n      this.attachShadow({\n        mode: 'open'\n      });\n      this.shadowRoot.appendChild(buttonTemplate.content.cloneNode(true));\n      let dynamicStyles;\n\n      if (this.hasAttribute('colour')) {\n        dynamicStyles = `:host {\n                    --background-colour: ${this.getAttribute('colour')};\n                }`;\n      }\n\n      this.shadowRoot.querySelector('style').innerHTML += dynamicStyles;\n    } //Insert content from attributes\n\n\n    if (this.hasAttribute('link')) {\n      let link = this.getAttribute('link');\n      this.addEventListener('click', () => {\n        window.location.href = link;\n      });\n    } else if (this.hasAttribute('action')) {\n      let action = this.getAttribute('action');\n      this.addEventListener('click', () => {\n        eval(action);\n      }); // TODO: Find a more secure option\n    }\n\n    ShadyCSS && ShadyCSS.styleElement({\n      '--background-colour': this.hasAttribute('colour') ? this.getAttribute('colour') : 'red'\n    });\n  }\n\n  attributesChangedCallback(name, oldVal, newVal) {\n    if (name == 'colour') {\n      this.adjustColour();\n    }\n\n    name === \"colour\" && ShadyCSS && ShadyCSS.styleElement({\n      '--background-colour': newVal ? 'grey' : 'white'\n    });\n  }\n\n  adjustColour() {\n    let dynamicStyles;\n\n    if (this.hasAttribute('colour')) {\n      dynamicStyles = `:host {\n                --background-colour: ${this.getAttribute('colour')};\n            }`;\n    }\n\n    this.shadowRoot.querySelector('style').innerHTML += dynamicStyles;\n  }\n\n}\n\nlet menuItemTemplate = document.createElement('template');\nmenuItemTemplate.innerHTML = `<style>\n:host {\n    margin: 1em;\n    min-width: 10vw;\n}\n</style>\n<slot></slot>`;\nwindow.ShadyCSS && window.ShadyCSS.prepareTemplate(menuItemTemplate, 'compackt-menu-item');\n\nclass MenuItem extends compacktElement {\n  get observedAttributes() {\n    return ['link'];\n  }\n\n  constructor() {\n    super();\n  }\n\n  connectedCallback() {\n    window.ShadyCSS && window.ShadyCSS.styleElement(this);\n\n    if (!this.shadowRoot) {\n      this.attachShadow({\n        mode: 'open'\n      });\n      this.shadowRoot.appendChild(menuItemTemplate.content.cloneNode(true));\n    }\n\n    this.addEventListener('click', () => {\n      window.location.href = this.getAttribute('link');\n    });\n  }\n\n}\n\nlet dropdownTemplate = document.createElement('template');\ndropdownTemplate.innerHTML = `<style>\n\n:host(compackt-dropdown) {\n    position: absolute;\n    padding: 1em;\n    font-family: \"Muli\", sens-serif;\n    font-weight: bold;\n    border-radius: 8px;\n    cursor: pointer;\n    margin: 0;\n    background-color: var(--background-colour, red);\n    \n    height: 3em;\n    transition: height 0.8s, box-shadow 0.8s;\n    transition-delay: 0.3s;\n}\n  \n:host(compackt-dropdown.hover-open:hover) {\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.6);\n    transition: height 0.8s, box-shadow 0.8s;\n}\n\n:host(compackt-dropdown.open) {\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.6);\n    transition: height 0.8s, box-shadow 0.8s;\n}\n  \n:host(compackt-dropdown) > h2 {\n    font-size: 1.3em;\n    margin: 0;\n}\n  \n:host(compackt-dropdown) *::slotted(compackt-menu-item) {\n    position: static;\n    height: 0;\n    margin: 0;\n    padding: 0;\n    display: block;\n    opacity: 0;\n    transition: opacity 0.8s, height 0.8s, margin 0.8s;\n    transition-delay: 0s, 0.8s;\n    pointer-events: none;\n}\n  \n:host(compackt-dropdown.hover-open:hover) *::slotted(compackt-menu-item) {\n    position: static;\n    height: 1.4em;\n    opacity: 1;\n    margin-top: 1em;\n    margin-bottom: 1em;\n    transition: opacity 0.8s, height 0.8s, margin 0.8s;\n    transition-delay: 0.5s;\n    pointer-events: auto;\n}\n\n:host(compackt-dropdown.open) *::slotted(compackt-menu-item) {\n    position: static;\n    height: 1.4em;\n    opacity: 1;\n    margin-top: 1em;\n    margin-bottom: 1em;\n    transition: opacity 0.8s, height 0.8s, margin 0.8s;\n    transition-delay: 0.5s;\n    pointer-events: auto;\n}\n  \n:host(compackt-dropdown.hover-open:hover) *::slotted(compackt-menu-item:hover) {\n    color: white;\n    cursor: pointer;\n    transition: color 0.5s;\n}\n\n:host(compackt-dropdown.open) *::slotted(compackt-menu-item:hover) {\n    color: white;\n    cursor: pointer;\n    transition: color 0.5s;\n}\n  \n</style>\n<h2 id='name'></h2>\n<slot></slot>`;\nwindow.ShadyCSS && window.ShadyCSS.prepareTemplate(dropdownTemplate, 'compackt-dropdown');\n\nclass Dropdown extends compacktElement {\n  // TODO: Complete transitions\n  //ATTRIBUTES\n  get observedAttributes() {\n    return ['colour', 'mode', 'name'];\n  }\n\n  get boundAttributes() {\n    return [];\n  }\n\n  constructor() {\n    super();\n  } //CALLBACK FUNCTIONS\n\n\n  connectedCallback() {\n    window.ShadyCSS && window.ShadyCSS.styleElement(this);\n\n    if (!this.shadowRoot) {\n      this.attachShadow({\n        mode: 'open'\n      });\n      this.shadowRoot.appendChild(dropdownTemplate.content.cloneNode(true)); //Add dynamic styling\n\n      let dynamicStyles;\n\n      if (this.hasAttribute('colour')) {\n        dynamicStyles = `:host {\n                    --background-colour: ${this.getAttribute('colour')};\n                }`;\n      }\n\n      this.shadowRoot.querySelector('style').innerHTML += dynamicStyles;\n    }\n\n    if (this.getAttribute('mode') === 'hover') {\n      this.classList.add('hover-open');\n    } else {\n      this.addEventListener('click', () => {\n        if (this.getAttribute('open') === 'true') {\n          this.setAttribute('open', 'false');\n          this.classList.remove('open');\n        } else {\n          this.setAttribute('open', 'true');\n          this.classList.add('open');\n        }\n      });\n    } //Set the name of the dropdown;\n\n\n    this.shadowRoot.querySelector('#name').textContent = this.getAttribute('name'); //Calculate the appropriate dropdown height\n\n    this.shadowRoot.querySelector('slot').addEventListener('slotchange', () => {\n      let children = this.shadowRoot.querySelector('slot').assignedNodes();\n      let styles = this.shadowRoot.querySelectorAll('style');\n      let style = styles[styles.length - 1];\n      style.innerHTML += `:host(compackt-dropdown.hover-open:hover) {\n                height: ${3 + 1.3 * (children.length - 1)}em;\n            }\n\n            :host(compackt-dropdown.open) {\n                height: ${3 + 1.3 * children.length - 1}em;\n            }\n            `;\n    });\n    ShadyCSS && ShadyCSS.styleElement({\n      '--open-height': true ? 'grey' : undefined\n    });\n    ShadyCSS && ShadyCSS.styleElement({\n      '--background-colour': this.hasAttribute('colour') ? this.getAttribute('colour') : 'white'\n    });\n  }\n\n}\n\nlet headerTemplate = document.createElement('template');\nheaderTemplate.innerHTML = `<style>\n\n:host(compackt-header) {\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.6);\n    position: absolute;\n    left: 0;\n    right: 0;\n    background-color: var(--background-colour, red);\n    height: 12vh;\n    text-align: center;\n}\n  \n:host(compackt-header) #container {\n    height: 100%;\n    position: relative;\n}\n  \n:host(compackt-header) h1 {\n    display: inline-block;\n    font-family: \"Muli\", sans-serif;\n    font-weight: 800;\n    margin: 0;\n    margin-top: 3vh;\n    margin-bottom: 2vh;\n    cursor: pointer;\n    vertical-align: middle;\n}\n  \n:host(compackt-header.sticky) {\n    position: fixed;\n}\n  \n:host(compackt-header) *::slotted(compackt-dropdown) {\n    display: none;\n    right: 0;\n}\n  \n:host(compackt-header) #menu-icon {\n    position: absolute;\n    text-align: center;\n    height: 10vh;\n    width: 10vh;\n    top: 0;\n    right: 0;\n}\n  \n:host(compackt-header) #menu-icon div {\n    display: block;\n    background-color: black;\n    height: 0.3em;\n    width: 2em;\n    margin: 0 auto;\n    margin-top: 0;\n    margin-bottom: 0.4em;\n    transition: opacity 0.8s;\n}\n  \n:host(compackt-header) #menu-icon div:first-child {\n    margin-top: 4.2vh;\n    transition: transform 0.8s;\n}\n  \n:host(compackt-header) #menu-icon div:last-child {\n    padding-bottom: 0;\n    transition: transform 0.8s;\n}\n  \n:host(compackt-header.open) #menu-icon div {\n    position: relative;\n    opacity: 0;\n    transition: opacity 0.8s;\n}\n  \n:host(compackt-header.open) #menu-icon div:first-child {\n    opacity: 1;\n    transform: rotate(45deg) translate(0.5em, 0.5em);\n    transition: transform 0.8s;\n}\n  \n:host(compackt-header.open) #menu-icon div:last-child {\n    opacity: 1;\n    transform: rotate(-45deg) translate(0.5em, -0.5em);\n    transition: transform 0.8s;\n}\n  \n:host(compackt-header) #shade {\n    height: 88vh;\n    width: 100vw;\n    background-color: #333333;\n    position: fixed;\n    left: 0;\n    opacity: 0;\n    right: 0;\n    bottom: 0;\n    z-index: -10;\n\n    transition: opacity 0.8s;\n}\n\n:host(compackt-header.open) #shade {\n    opacity: 0.6;\n    z-index: 5;\n\n    transition: opacity 0.8s;\n}\n\n:host(compackt-header.open) #menu {\n    position: absolute;\n    z-index: 30;\n    padding-left: 2em;\n    padding-right: 2em;\n    left: 0;\n    right: 0;\n    top: 10vh;\n    bottom: -90vh;\n}\n\n:host(compackt-header.open) *::slotted(compackt-dropdown) {\n    position: relative;\n    display: block;\n    margin-top: 2em;\n    position: static;\n    z-index: 10;\n}\n  \n@media all and (min-height: 1000px) {\n    :host(compackt-header) {\n      height: 10vh;\n    }\n}\n@media all and (min-width: 800px) {\n    :host(compackt-header) *::slotted(compackt-dropdown) {\n      display: block;\n      margin-top: 1em;\n      margin-left: 2em;\n      position: relative;\n      float: right;\n    }\n  \n    :host(compackt-header) > #container {\n      box-sizing: border-box;\n      margin-left: 5em;\n      margin-right: 3em;\n    }\n  \n    :host(compackt-header) h1 {\n      margin-top: 2vh;\n      float: left;\n    }\n  \n    :host(compackt-header) #menu-icon {\n      display: none;\n    }\n}\n  \n</style>\n\n<div id='container'>\n    <div id='shade'></div>\n    <h1 id='name'></h1>\n    <div id='menu'>\n        <slot></slot>\n    </div>\n    \n</div>\n<div id='menu-icon'>\n    <div></div>\n    <div></div>\n    <div></div>\n</div>`;\nwindow.ShadyCSS && window.ShadyCSS.prepareTemplate(headerTemplate, 'compackt-header');\n\nclass StickyHeader extends compacktElement {\n  get observedAttributes() {\n    return ['colour', 'name', 'image', 'link'];\n  }\n\n  get boundAttributes() {\n    return ['sticky'];\n  }\n\n  constructor() {\n    super();\n  }\n\n  connectedCallback() {\n    window.ShadyCSS && window.ShadyCSS.styleElement(this);\n\n    if (!this.shadowRoot) {\n      this.attachShadow({\n        mode: 'open'\n      });\n      this.shadowRoot.appendChild(headerTemplate.content.cloneNode(true)); //Add dynamic styling\n\n      let dynamicStyles;\n\n      if (this.hasAttribute('colour')) {\n        dynamicStyles = `:host {\n                    --background-colour: ${this.getAttribute('colour')};\n                }`;\n      }\n\n      this.shadowRoot.querySelector('style').innerHTML += dynamicStyles;\n    }\n\n    this.shadowRoot.querySelector('#menu-icon').addEventListener('click', () => {\n      if (this.classList.contains('open')) {\n        this.classList.remove('open');\n      } else {\n        this.classList.add('open');\n      }\n    });\n\n    if (this.hasAttribute('sticky')) {\n      this.classList.add('sticky');\n    } //Insert content from attributes\n\n\n    if (this.hasAttribute('name')) {\n      this.shadowRoot.querySelector('#name').textContent = this.getAttribute('name');\n    }\n\n    if (this.hasAttribute('image')) {\n      let container = this.shadowRoot.querySelector('#container');\n      let imageNode = document.createElement('img');\n      imageNode.setAttribute('src', `${this.getAttribute('image')}`);\n      container.insertBefore(imageNode, container.childNodes[0]);\n    }\n\n    if (this.hasAttribute('link')) {\n      this.shadowRoot.querySelector('h1').addEventListener('click', () => {\n        window.location.href = this.getAttribute('link');\n      });\n    }\n\n    ShadyCSS && ShadyCSS.styleElement({\n      '--background-colour: ': this.hasAttribute('colour') ? this.getAttribute('colour') : 'red'\n    });\n  }\n\n}\n\nlet collapsibleTemplate = document.createElement('template');\ncollapsibleTemplate.innerHTML = `<style>\n\n</style>`;\nwindow.ShadyCSS && window.ShadyCSS.prepareTemplate(collapsibleTemplate, 'compackt-collapsible-panel');\n\nclass CollapsiblePanel extends compacktElement {\n  get observedAttributes() {\n    return ['colour', 'name'];\n  }\n\n  get boundAttributes() {\n    return [];\n  }\n\n  constructor() {\n    super();\n  }\n\n  connectedCallback() {\n    window.ShadyCSS && window.ShadyCSS.styleElement(this);\n\n    if (!this.shadowRoot) {\n      this.attachShadow({\n        mode: 'open'\n      });\n      this.shadowRoot.appendChild(headerTemplate.content.cloneNode(true));\n    }\n\n    this.addEventListener('click', () => {\n      if (this.hasAttribute('open')) {\n        this.setAttribute('open', 'false');\n        this.classList.remove('open');\n      } else {\n        this.setAttribute('open', 'true');\n        this.classList.add('open');\n      }\n    });\n  }\n\n}\n\nlet accordianTemplate = document.createElement('template');\naccordianTemplate.innerHTML = `<style>\n\n</style>`;\nwindow.ShadyCSS && window.ShadyCSS.prepareTemplate(accordianTemplate, 'compackt-accordian');\n\nclass Accordian extends compacktElement {\n  get observedAttributes() {\n    return ['colour', 'panel'];\n  }\n\n  get boundAttributes() {\n    return ['bound'];\n  }\n\n  constructor() {\n    super();\n  } //CALLBACK FUNCTIONS\n\n\n  connectedCallback() {\n    window.ShadyCSS && window.ShadyCSS.styleElement(this);\n\n    if (!this.shadowRoot) {\n      this.attachShadow({\n        mode: 'open'\n      });\n      this.shadowRoot.appendChild(headerTemplate.content.cloneNode(true));\n    }\n\n    if (this.hasAttribute('bound')) {\n      let panels = this.getElementsByTagName('compackt-collapsible-panel');\n\n      for (let i = 0; i < panels.length; i++) {\n        let panel = panels[i];\n\n        if (i.toString() == this.getAttribute('panel')) {\n          panel.setAttribute('open', 'true');\n          panel.classList.add('open');\n        } else {\n          panel.setAttribute('open', 'false');\n          panel.classList.remove('open');\n        } //Make panels interconnect\n\n      }\n\n      ;\n    }\n  }\n\n}\n\nfunction Initialise(...args) {\n  //Embed the required fonts\n  let fontLink = document.createElement('link');\n  fontLink.setAttribute('href', 'https://fonts.googleapis.com/css?family=Source+Sans+Pro|Muli:400,700,800|Roboto+Mono&display=swap');\n  fontLink.setAttribute('rel', 'stylesheet');\n  let head = document.getElementsByTagName('head')[0];\n  head.appendChild(fontLink); //Define the selected custom elements\n\n  for (let arg of args) {\n    arg = arg.toString().toUpperCase();\n\n    switch (arg) {\n      case 'PANEL':\n        customElements.define('compackt-panel', Panel);\n\n      case 'BUTTON':\n        customElements.define('compackt-button', Button);\n        break;\n\n      case 'DROPDOWN':\n        customElements.define('compackt-menu-item', MenuItem);\n        customElements.define('compackt-dropdown', Dropdown);\n        break;\n\n      case 'STICKYHEADER':\n        customElements.define('compackt-header', StickyHeader);\n        break;\n\n      case 'ACCORDIAN':\n        customElements.define('compackt-collapsible-panel', CollapsiblePanel);\n        customElements.define('compackt-accordian', Accordian);\n        break;\n\n      case 'COLLAPSIBLEPANEL':\n        customElements.define('compackt-collapsible-panel', CollapsiblePanel);\n        break;\n    }\n  }\n}\n\nInitialise('Dropdown', 'StickyHeader', 'Accordian', 'Button', 'Panel');\n\n//# sourceURL=webpack:///./src/index.ts?");

/***/ }),

/***/ "./src/sass/styles.scss":
/*!******************************!*\
  !*** ./src/sass/styles.scss ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin\n\n//# sourceURL=webpack:///./src/sass/styles.scss?");

/***/ })

/******/ });